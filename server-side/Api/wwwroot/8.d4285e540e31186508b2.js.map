{"version":3,"sources":["./src/app/shared/enums/gender.enum.ts","./src/app/shared/services/auth-doctor.service.ts","./src/app/shared/components/input-select/input-select.component.html","./src/app/shared/components/input-select/input-select.component.ts","./src/app/shared/components/input-date/input-date.component.html","./src/app/shared/components/input-date/input-date.component.ts","./src/app/views/auth/auth-doctor/auth-doctor.component.ts","./src/app/views/auth/auth-doctor/auth-doctor.component.html","./src/app/views/auth/auth.component.ts","./src/app/views/auth/auth.component.html","./src/app/views/auth/forget-password/forget-password.component.ts","./src/app/views/auth/forget-password/forget-password.component.html","./src/app/views/auth/auth-routing.module.ts","./src/app/views/auth/login/login.component.ts","./src/app/views/auth/login/login.component.html","./src/app/views/auth/reset-password/reset-password.component.ts","./src/app/views/auth/reset-password/reset-password.component.html","./src/app/views/auth/auth.module.ts"],"names":["Gender","AuthDoctorService","http","baseUrl","environment","api","token","this","get","userForm","put","pipe","map","user","InputSelectComponent","ngControl","formControl","valueAccessor","control","obj","fn","InputDateComponent","bsConfig","containerClass","dateInputFormat","AuthDoctorComponent","title","authDoctorService","fb","route","toastr","fg","gender","setTitle","checkRouter","intitializeForm","maxDate","Date","setFullYear","getFullYear","group","fullname","required","birth","password","confirmPassword","snapshot","paramMap","checkUser","forEach","res","register","value","response","success","message","registerSubmit","AuthComponent","parentElementChilds","document","querySelector","classList","remove","ForgetPasswordComponent","validationErrors","email","console","log","forgetPasswordSubmit","routes","path","component","children","LoginComponent","router","isExist","returnUrl","queryParams","login","navigate","loginSubmit","ResetPasswordComponent","resetPasswordSubmit","AuthRoutingModule","forChild","AuthModule"],"mappings":"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","file":"8.d4285e540e31186508b2.js","sourcesContent":["export enum Gender {\n  select = 'Select',\n  male = 'Male',\n  female = 'Female'\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { User, UserFormValues } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthDoctorService {\n  private baseUrl = environment.api;\n\n  constructor(private http: HttpClient) { }\n\n  public checkUser(token: string) {\n    return this.http.get(`${this.baseUrl}/doctor/${token}`);\n  }\n\n  public register(token: string, userForm: UserFormValues) {\n    return this.http\n      .put<User>(`${this.baseUrl}/doctor?token=${token}`, userForm)\n      .pipe(map((user) => user));\n  }\n}\n","<div class=\"form-group\">\n  <select\n    [class.is-invalid]=\"ngControl.touched && ngControl.invalid\"\n    class=\"form-control\"\n    [formControl]=\"formControl\"\n  >\n    <option *ngFor=\"let item of values | keyvalue\" [value]=\"item.value\" [selected]=\"item.value\">{{item.value}}</option>\n  </select>\n  <div *ngIf=\"ngControl.control?.errors?.required\" class=\"invalid-feedback\">\n    Please enter a {{ label }}\n  </div>\n</div>\n","import { AfterViewInit, Component, Input, Self } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { EnumType } from 'typescript';\n\n@Component({\n  selector: 'app-input-select',\n  templateUrl: './input-select.component.html'\n})\nexport class InputSelectComponent implements ControlValueAccessor, AfterViewInit {\n  @Input() label!: string;\n  @Input() values: any;\n\n  public formControl = new FormControl('');\n\n  constructor(@Self() public ngControl: NgControl) {\n    ngControl.valueAccessor = this;\n  }\n\n  ngAfterViewInit(): void {\n    this.formControl = this.ngControl.control as FormControl;\n  }\n\n  writeValue(obj: any): void { }\n\n  registerOnChange(fn: any): void { }\n\n  registerOnTouched(fn: any): void { }\n}\n","<div class=\"form-group\">\n  <input \n      type=\"text\"\n      [class.is-invalid]='ngControl.touched && ngControl.invalid'\n      class='form-control'\n      [formControl]='formControl'\n      placeholder=\"{{label}}\"\n      bsDatepicker\n      [bsConfig]='bsConfig'\n      [maxDate]='maxDate'\n  >\n  <div *ngIf=\"ngControl.control?.errors?.required\" class=\"invalid-feedback\">{{label}} is required</div>\n</div>","import { AfterViewInit, Component, Input, Self } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\n\n@Component({\n  selector: 'app-input-date',\n  templateUrl: './input-date.component.html',\n})\nexport class InputDateComponent implements ControlValueAccessor, AfterViewInit {\n  @Input() label!: string;\n  @Input() maxDate!: Date;\n  public bsConfig!: Partial<BsDatepickerConfig>;\n\n  public formControl = new FormControl('');\n\n  constructor(@Self() public ngControl: NgControl) {\n    this.ngControl.valueAccessor = this;\n    this.bsConfig = {\n      containerClass: 'theme-red',\n      dateInputFormat: 'DD MMMM YYYY'\n    };\n  }\n\n  ngAfterViewInit(): void {\n    this.formControl = this.ngControl.control as FormControl;\n  }\n\n  writeValue(obj: any): void { }\n\n  registerOnChange(fn: any): void { }\n\n  registerOnTouched(fn: any): void { }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Gender } from 'src/app/shared/enums/gender.enum';\r\nimport { AuthDoctorService } from 'src/app/shared/services/auth-doctor.service';\r\nimport { ToastrService } from 'src/app/shared/services/toastr.service';\r\n\r\n@Component({\r\n  selector: 'app-auth-doctor',\r\n  templateUrl: './auth-doctor.component.html',\r\n})\r\nexport class AuthDoctorComponent implements OnInit {\r\n  private token!: string;\r\n\r\n  public fg: FormGroup = new FormGroup({});\r\n  public maxDate!: Date;\r\n  public gender = Gender;\r\n\r\n  constructor(\r\n    private title: Title,\r\n    private authDoctorService: AuthDoctorService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.title.setTitle('Doccure | Doctor Register');\r\n    this.checkRouter();\r\n    this.intitializeForm();\r\n    this.maxDate = new Date();\r\n    this.maxDate.setFullYear(this.maxDate.getFullYear() - 18);\r\n  }\r\n\r\n  private intitializeForm() {\r\n    this.fg = this.fb.group({\r\n      fullname: new FormControl('', Validators.required),\r\n      gender: new FormControl('', Validators.required),\r\n      birth: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required),\r\n      confirmPassword: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  private checkRouter() {\r\n    const token = this.route.snapshot.paramMap.get('token');\r\n    token ? (this.token = token) : (this.token = '');\r\n\r\n    this.authDoctorService.checkUser(this.token).forEach((res) => res);\r\n  }\r\n\r\n  public registerSubmit() {\r\n    this.authDoctorService\r\n      .register(this.token, this.fg.value)\r\n      .forEach((response) => this.toastr.success(response.message, 'Success'));\r\n  }\r\n}\r\n","<h1>Register</h1>\n<p class=\"account-subtitle\">Access to our dashboard</p>\n\n<!-- Form -->\n<form [formGroup]=\"fg\" (ngSubmit)=\"fg.valid && registerSubmit()\" autocomplete=\"off\">\n  <app-input-text  [type]='\"text\"' [label]='\"Fullname\"' [formControlName]='\"fullname\"'></app-input-text>\n  <app-input-select [formControlName]=\"'gender'\" [values]=\"gender\"></app-input-select>\n  <app-input-date  [label]=\"'Birth'\" [formControlName]=\"'birth'\" [maxDate]='maxDate'></app-input-date>\n  <app-input-text  [type]='\"password\"' [label]='\"Password\"' [formControlName]='\"password\"'></app-input-text>\n  <app-input-text  [type]='\"password\"' [label]='\"Confirm Password\"' [formControlName]='\"confirmPassword\"'></app-input-text>\n  <div class=\"form-group\">\n    <button [disabled]=\"!fg.valid\" class=\"btn btn-primary btn-block\" type=\"submit\">\n      Register\n    </button>\n  </div>\n</form>\n<!-- /Form -->\n\n<div class=\"login-or\">\n  <span class=\"or-line\"></span>\n  <span class=\"span-or\">or</span>\n</div>\n\n<div class=\"text-center dont-have\">\n  Already have an account? <a [routerLink]=\"['/auth/login']\">Login</a>\n</div>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.parentElementChilds();\r\n  }\r\n\r\n  private parentElementChilds() {\r\n    document.querySelector('html')?.classList.remove('menu-opened');\r\n    document.querySelector('#main-html-child')?.classList.remove('opened');\r\n  }\r\n}\r\n","<!-- Main Wrapper -->\n<div class=\"main-wrapper login-body\">\n  <div class=\"login-wrapper\">\n    <div class=\"container\">\n      <div class=\"loginbox\">\n        <div class=\"login-left\">\n          <img class=\"img-fluid\" src=\"assets/img/logo-white.png\" alt=\"Logo\" />\n        </div>\n        <div class=\"login-right\">\n          <div class=\"login-right-wrap\">\n            <router-outlet></router-outlet>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- /Main Wrapper -->\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html'\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n  public fg: FormGroup = new FormGroup({});\r\n  public validationErrors: string[] = [];\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.intitializeForm();\r\n  }\r\n\r\n  private intitializeForm() {\r\n    this.fg = this.fb.group({\r\n      email: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  public forgetPasswordSubmit() {\r\n    console.log(this.fg.value);\r\n  }\r\n}\r\n","<h1>Forgot Password?</h1>\r\n<p class=\"account-subtitle\">Enter your email to get a password reset link</p>\r\n\r\n<!-- Form -->\r\n<form [formGroup]=\"fg\" (ngSubmit)=\"fg.valid && forgetPasswordSubmit()\" autocomplete=\"off\">\r\n  <app-input-text  [type]='\"email\"' [label]='\"Email\"' [formControlName]='\"email\"'></app-input-text>\r\n  <div class=\"form-group\">\r\n    <button [disabled]=\"!fg.valid\" class=\"btn btn-primary btn-block\" type=\"submit\">\r\n      Send Email\r\n    </button>\r\n  </div>\r\n</form>\r\n<!-- /Form -->\r\n\r\n<div class=\"login-or\">\r\n  <span class=\"or-line\"></span>\r\n  <span class=\"span-or\">or</span>\r\n</div>\r\n\r\n<div class=\"text-center dont-have\">\r\n  Remember your password? <a [routerLink]=\"['/auth/login']\">Login</a>\r\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthDoctorComponent } from './auth-doctor/auth-doctor.component';\nimport { AuthComponent } from './auth.component';\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\nimport { LoginComponent } from './login/login.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      { path: 'login', component: LoginComponent },\n      { path: 'doctor-register/:token', component: AuthDoctorComponent },\n      { path: 'forget-password', component: ForgetPasswordComponent },\n      { path: 'reset-password/:token', component: ResetPasswordComponent },\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public fg: FormGroup = new FormGroup({});\r\n\r\n  public returnUrl!: string;\r\n\r\n  constructor(\r\n    private title: Title,\r\n    private router: Router,\r\n    private api: AuthService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.api.isExist();\r\n    this.title.setTitle('Doccure | Login');\r\n    this.intitializeForm();\r\n\r\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/';\r\n  }\r\n\r\n  private intitializeForm() {\r\n    this.fg = this.fb.group({\r\n      email: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  public loginSubmit() {\r\n    const email = this.fg.value.email as string;\r\n    const password = this.fg.value.password as string;\r\n\r\n    this.api\r\n      .login(email, password)\r\n      .forEach(() => this.router.navigate([this.returnUrl]));\r\n  }\r\n}\r\n","<h1>Login</h1>\n<p class=\"account-subtitle\">Access to our dashboard</p>\n\n<!-- Form -->\n<form [formGroup]=\"fg\" (ngSubmit)=\"fg.valid && loginSubmit()\" autocomplete=\"off\">\n  <app-input-text  [type]='\"email\"' [label]='\"Email\"' [formControlName]='\"email\"'></app-input-text>\n  <app-input-text  [type]='\"password\"' [label]='\"Password\"' [formControlName]='\"password\"'></app-input-text>\n  <div class=\"form-group\">\n    <button [disabled]=\"!fg.valid\" class=\"btn btn-primary btn-block\" type=\"submit\">\n      Login\n    </button>\n  </div>\n</form>\n<!-- /Form -->\n\n<div class=\"text-center forgotpass\">\n  <a [routerLink]=\"['/auth/forget-password']\">Forgot Password?</a>\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html'\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  public fg: FormGroup = new FormGroup({});\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.intitializeForm();\r\n  }\r\n\r\n  private intitializeForm() {\r\n    this.fg = this.fb.group({\r\n      password: new FormControl('', Validators.required),\r\n      confirmPassword: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  public resetPasswordSubmit() {\r\n    console.log(this.fg.value);\r\n  }\r\n}\r\n","<h1>Reset Password</h1>\r\n<p class=\"account-subtitle\">Access to our dashboard</p>\r\n\r\n<!-- Form -->\r\n<form [formGroup]=\"fg\" (ngSubmit)=\"fg.valid && resetPasswordSubmit()\" autocomplete=\"off\">\r\n  <app-input-text  [type]='\"password\"' [label]='\"Password\"' [formControlName]='\"password\"'></app-input-text>\r\n  <app-input-text  [type]='\"password\"' [label]='\"Confirm Password\"' [formControlName]='\"confirmPassword\"'></app-input-text>\r\n  <div class=\"form-group\">\r\n    <button [disabled]=\"!fg.valid\" class=\"btn btn-primary btn-block\" type=\"submit\">\r\n      Reset Password\r\n    </button>\r\n  </div>\r\n</form>\r\n<!-- /Form -->","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\nimport { ComponentsHelperModule } from 'src/app/shared/components/components-helper.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthDoctorComponent } from './auth-doctor/auth-doctor.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\n\r\n@NgModule({\r\n  declarations: [AuthComponent, LoginComponent, ForgetPasswordComponent, ResetPasswordComponent, AuthDoctorComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    ComponentsHelperModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n"],"sourceRoot":"webpack:///"}