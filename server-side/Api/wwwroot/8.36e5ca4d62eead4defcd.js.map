{"version":3,"sources":["./src/app/shared/services/auth-doctor.service.ts","./src/app/shared/enums/gender.enum.ts","./src/app/shared/components/input-select/input-select.component.html","./src/app/shared/components/input-select/input-select.component.ts","./src/app/shared/components/input-date/input-date.component.html","./src/app/shared/components/input-date/input-date.component.ts","./src/app/shared/components/auth/auth-auth.component.html","./src/app/shared/components/auth/auth-auth.component.ts","./src/app/views/auth/auth-doctor/auth-doctor.component.ts","./src/app/views/auth/auth-doctor/auth-doctor.component.html","./src/app/views/auth/auth.component.ts","./src/app/views/auth/auth.component.html","./src/app/views/auth/forget-password/forget-password.component.ts","./src/app/views/auth/forget-password/forget-password.component.html","./src/app/views/auth/auth-routing.module.ts","./src/app/views/auth/login/login.component.ts","./src/app/views/auth/login/login.component.html","./src/app/views/auth/reset-password/reset-password.component.ts","./src/app/views/auth/reset-password/reset-password.component.html","./src/app/views/auth/auth.module.ts"],"names":["AuthDoctorService","http","toastrService","router","authService","baseUrl","environment","api","token","userForm","this","put","pipe","map","response","setCurrentUser","success","message","subscribe","navigate","Gender","InputSelectComponent","ngControl","formControl","valueAccessor","control","obj","fn","InputDateComponent","bsConfig","isAnimated","containerClass","dateInputFormat","AuthAuthComponent","fg","isLogin","isRegister","isForget","isReset","submitForm","gender","maxDate","Date","setFullYear","getFullYear","emit","submit","AuthDoctorComponent","title","authDoctorService","fb","route","setTitle","checkRouter","intitializeForm","group","fullname","required","birth","password","confirmPassword","snapshot","paramMap","get","checkExistUser","register","value","registerSubmit","AuthComponent","parentElementChilds","document","querySelector","classList","remove","ForgetPasswordComponent","email","forgetPassword","forgetPasswordSubmit","routes","path","component","children","LoginComponent","isExist","returnUrl","queryParams","login","loginSubmit","ResetPasswordComponent","resetPassword","resetPasswordSubmit","AuthRoutingModule","forChild","AuthModule"],"mappings":"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","file":"8.36e5ca4d62eead4defcd.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { UserFormValues } from '../models/user';\r\nimport { AuthService } from './auth.service';\r\nimport { ToastrService } from './toastr.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthDoctorService {\r\n  private baseUrl = environment.api;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private toastrService: ToastrService,\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  public register(token: string, userForm: UserFormValues) {\r\n    return this.http\r\n      .put(`${this.baseUrl}/doctor?token=${token}`, userForm)\r\n      .pipe(\r\n        map((response: any) => {\r\n          if (response.response) {\r\n            this.authService.setCurrentUser(response.response);\r\n            this.toastrService.success(response.message, 'Success');\r\n          }\r\n        })\r\n      )\r\n      .subscribe(() => this.router.navigate(['/main/doctor/dashboard']));\r\n  }\r\n}\r\n","export enum Gender {\n  select = 'Select',\n  male = 'Male',\n  female = 'Female'\n}\n","<div class=\"form-group\">\n  <select\n    [class.is-invalid]=\"ngControl.touched && ngControl.invalid\"\n    class=\"form-control\"\n    [formControl]=\"formControl\"\n  >\n    <option *ngFor=\"let item of values | keyvalue\" [value]=\"item.value\" [selected]=\"item.value\">{{item.value}}</option>\n  </select>\n  <div *ngIf=\"ngControl.control?.errors?.required\" class=\"invalid-feedback\">\n    Please enter a {{ label }}\n  </div>\n</div>\n","import { AfterViewInit, Component, Input, Self } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { EnumType } from 'typescript';\n\n@Component({\n  selector: 'app-input-select',\n  templateUrl: './input-select.component.html'\n})\nexport class InputSelectComponent implements ControlValueAccessor, AfterViewInit {\n  @Input() label!: string;\n  @Input() values: any;\n\n  public formControl = new FormControl('');\n\n  constructor(@Self() public ngControl: NgControl) {\n    ngControl.valueAccessor = this;\n  }\n\n  ngAfterViewInit(): void {\n    this.formControl = this.ngControl.control as FormControl;\n  }\n\n  writeValue(obj: any): void { }\n\n  registerOnChange(fn: any): void { }\n\n  registerOnTouched(fn: any): void { }\n}\n","<div class=\"form-group\">\r\n  <input\r\n    type=\"text\"\r\n    [class.is-invalid]=\"ngControl.touched && ngControl.invalid\"\r\n    class=\"form-control\"\r\n    [formControl]=\"formControl\"\r\n    bsDatepicker\r\n    [bsConfig]=\"bsConfig\"\r\n    [maxDate]=\"maxDate\"\r\n  />\r\n  <div></div>\r\n  <div *ngIf=\"ngControl.control?.errors?.required\" class=\"invalid-feedback\">\r\n    {{ label }} is required\r\n  </div>\r\n</div>\r\n","import { AfterViewInit, Component, Input, Self } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\r\nimport { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\r\n\r\n@Component({\r\n  selector: 'app-input-date',\r\n  templateUrl: './input-date.component.html',\r\n})\r\nexport class InputDateComponent implements ControlValueAccessor, AfterViewInit {\r\n  @Input() label!: string;\r\n  @Input() maxDate!: Date;\r\n  public bsConfig!: Partial<BsDatepickerConfig>;\r\n\r\n  public formControl = new FormControl('');\r\n\r\n  constructor(@Self() public ngControl: NgControl) {\r\n    this.ngControl.valueAccessor = this;\r\n    this.bsConfig = {\r\n      isAnimated: true,\r\n      containerClass: 'theme-blue',\r\n      dateInputFormat: 'DD/MM/YYYY'\r\n    };\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.formControl = this.ngControl.control as FormControl;\r\n  }\r\n\r\n  writeValue(obj: any): void { }\r\n\r\n  registerOnChange(fn: any): void { }\r\n\r\n  registerOnTouched(fn: any): void { }\r\n}\r\n","<!-- Main Wrapper -->\r\n<div class=\"main-wrapper login-body\">\r\n  <div class=\"login-wrapper\">\r\n    <div class=\"container\">\r\n      <div class=\"loginbox\">\r\n        <div class=\"login-left\">\r\n          <img class=\"img-fluid\" src=\"assets/img/logo-white.png\" alt=\"Logo\" />\r\n        </div>\r\n        <div class=\"login-right\">\r\n          <div class=\"login-right-wrap\">\r\n            <h1 *ngIf=\"title\">{{ title }}</h1>\r\n            <p *ngIf=\"subTitle\" class=\"account-subtitle\">\r\n             {{ subTitle }}\r\n            </p>\r\n\r\n            <!-- Form -->\r\n            <form [formGroup]=\"fg\" (ngSubmit)=\"fg.valid && submit()\" autocomplete=\"off\">\r\n              <app-input-text *ngIf=\"isRegister\" [type]=\"'text'\" [label]=\"'Fullname'\" [formControlName]=\"'fullname'\">\r\n              </app-input-text>\r\n              <app-input-select *ngIf=\"isRegister\" [formControlName]=\"'gender'\" [values]=\"gender\"></app-input-select>\r\n              <app-input-date *ngIf=\"isRegister\" [label]=\"'Birth'\" [formControlName]=\"'birth'\" [maxDate]=\"maxDate\">\r\n              </app-input-date>\r\n              <app-input-text *ngIf=\"isLogin || isForget\" [type]=\"'email'\" [label]=\"'Email'\" [formControlName]=\"'email'\">\r\n              </app-input-text>\r\n              <app-input-text *ngIf=\"isLogin || isRegister || isReset\" [type]=\"'password'\" [label]=\"'Password'\"\r\n                [formControlName]=\"'password'\">\r\n              </app-input-text>\r\n              <app-input-text *ngIf=\"isRegister || isReset\" [type]=\"'password'\" [label]=\"'Confirm Password'\"\r\n                [formControlName]=\"'confirmPassword'\">\r\n              </app-input-text>\r\n              <div class=\"form-group\">\r\n                <button [disabled]=\"!fg.valid\" *ngIf=\"title\" class=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  {{ isForget ? 'Send Email' : title }}\r\n                </button>\r\n              </div>\r\n            </form>\r\n            <!-- /Form -->\r\n\r\n            <div *ngIf=\"isLogin\" class=\"text-center forgotpass\">\r\n              <a [routerLink]=\"['/auth/forget-password']\">Forgot Password?</a>\r\n            </div>\r\n\r\n            <div *ngIf=\"isRegister\" class=\"login-or\">\r\n              <span class=\"or-line\"></span>\r\n              <span class=\"span-or\">or</span>\r\n            </div>\r\n\r\n            <div *ngIf=\"isRegister\" class=\"text-center dont-have\">\r\n              Already have an account? <a [routerLink]=\"['/auth/login']\">Login</a>\r\n            </div>\r\n\r\n            <div *ngIf=\"isForget\" class=\"text-center dont-have\">\r\n              Remember your password? <a [routerLink]=\"['/auth/login']\">Login</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- /Main Wrapper -->","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Gender } from '../../enums/gender.enum';\r\n\r\n@Component({\r\n  selector: 'app-auth-auth',\r\n  templateUrl: './auth-auth.component.html',\r\n})\r\nexport class AuthAuthComponent implements OnInit {\r\n  @Input() fg: FormGroup = new FormGroup({});\r\n  @Input() returnUrl!: string;\r\n  @Input() title!: string;\r\n  @Input() subTitle!: string;\r\n  @Input() isLogin = false;\r\n  @Input() isRegister = false;\r\n  @Input() isForget = false;\r\n  @Input() isReset = false;\r\n  @Output() submitForm = new EventEmitter();\r\n\r\n  public maxDate!: Date;\r\n  public gender = Gender;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.maxDate = new Date();\r\n    this.maxDate.setFullYear(this.maxDate.getFullYear() - 18);\r\n  }\r\n\r\n  public submit() {\r\n    this.submitForm.emit();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthDoctorService } from 'src/app/shared/services/auth-doctor.service';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-auth-doctor',\r\n  templateUrl: './auth-doctor.component.html',\r\n})\r\nexport class AuthDoctorComponent implements OnInit {\r\n  private token!: string;\r\n  public fg: FormGroup = new FormGroup({});\r\n\r\n  constructor(\r\n    private title: Title,\r\n    private authDoctorService: AuthDoctorService,\r\n    private authService: AuthService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.title.setTitle('Doccure | Doctor Register');\r\n    this.checkRouter();\r\n    this.intitializeForm();\r\n  }\r\n\r\n  private intitializeForm() {\r\n    this.fg = this.fb.group({\r\n      fullname: new FormControl('', Validators.required),\r\n      gender: new FormControl('', Validators.required),\r\n      birth: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required),\r\n      confirmPassword: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  private checkRouter() {\r\n    const token = this.route.snapshot.paramMap.get('token');\r\n    token ? (this.token = token) : (this.token = '');\r\n\r\n    this.authService.checkExistUser(this.token);\r\n  }\r\n\r\n  public registerSubmit() {\r\n    this.authDoctorService.register(this.token, this.fg.value);\r\n  }\r\n}\r\n","<app-auth-auth\r\n  [isRegister]=\"true\"\r\n  [title]=\"'Register'\"\r\n  [subTitle]=\"'Access to our dashboard'\"\r\n  [fg]=\"fg\"\r\n  (submitForm)=\"registerSubmit()\"\r\n></app-auth-auth>\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.parentElementChilds();\r\n  }\r\n\r\n  private parentElementChilds() {\r\n    document.querySelector('html')?.classList.remove('menu-opened');\r\n    document.querySelector('#main-html-child')?.classList.remove('opened');\r\n  }\r\n}\r\n","<router-outlet></router-outlet>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html'\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n  public fg: FormGroup = new FormGroup({});\r\n\r\n  constructor(private fb: FormBuilder, private authService: AuthService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.intitializeForm();\r\n  }\r\n\r\n  private intitializeForm() {\r\n    this.fg = this.fb.group({\r\n      email: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  public forgetPasswordSubmit() {\r\n    this.authService.forgetPassword(this.fg.value);\r\n  }\r\n}\r\n","<app-auth-auth\r\n  [isForget]=\"true\"\r\n  [title]=\"'Forgot Password?'\"\r\n  [subTitle]=\"'Enter your email to get a password reset link'\"\r\n  [fg]=\"fg\"\r\n  (submitForm)=\"forgetPasswordSubmit()\"\r\n></app-auth-auth>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthDoctorComponent } from './auth-doctor/auth-doctor.component';\nimport { AuthComponent } from './auth.component';\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\nimport { LoginComponent } from './login/login.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      { path: 'login', component: LoginComponent },\n      { path: 'doctor-register/:token', component: AuthDoctorComponent },\n      { path: 'forget-password', component: ForgetPasswordComponent },\n      { path: 'reset-password/:token', component: ResetPasswordComponent },\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public fg: FormGroup = new FormGroup({});\r\n  public returnUrl!: string;\r\n\r\n  constructor(\r\n    private title: Title,\r\n    private api: AuthService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.api.isExist();\r\n    this.title.setTitle('Doccure | Login');\r\n    this.intitializeForm();\r\n\r\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/';\r\n  }\r\n\r\n  private intitializeForm() {\r\n    this.fg = this.fb.group({\r\n      email: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  public loginSubmit() {\r\n    const email = this.fg.value.email as string;\r\n    const password = this.fg.value.password as string;\r\n\r\n    this.api.login(email, password, this.returnUrl);\r\n  }\r\n}\r\n","<app-auth-auth\r\n  [isLogin]=\"true\"\r\n  [title]=\"'Login'\"\r\n  [subTitle]=\"'Access to our dashboard'\"\r\n  [fg]=\"fg\"\r\n  (submitForm)=\"loginSubmit()\"\r\n></app-auth-auth>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html'\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  public fg: FormGroup = new FormGroup({});\r\n\r\n  constructor(private fb: FormBuilder, private authService: AuthService, private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.checkRouter();\r\n    this.intitializeForm();\r\n  }\r\n\r\n  private intitializeForm() {\r\n    this.fg = this.fb.group({\r\n      password: new FormControl('', Validators.required),\r\n      confirmPassword: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  private checkRouter() {\r\n    const token = this.route.snapshot.paramMap.get('token') as string;\r\n    this.authService.checkExistUser(token);\r\n  }\r\n\r\n  public resetPasswordSubmit() {\r\n    const token = this.route.snapshot.paramMap.get('token') as string;\r\n    const password = this.fg.value.password as string;\r\n    const confirmPassword = this.fg.value.confirmPassword as string;\r\n\r\n    this.authService.resetPassword(password, confirmPassword, token);\r\n  }\r\n}\r\n","<app-auth-auth\r\n  [isReset]=\"true\"\r\n  [title]=\"'Reset Password'\"\r\n  [subTitle]=\"'Access to our dashboard'\"\r\n  [fg]=\"fg\"\r\n  (submitForm)=\"resetPasswordSubmit()\"\r\n></app-auth-auth>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\nimport { ComponentsHelperModule } from 'src/app/shared/components/components-helper.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthDoctorComponent } from './auth-doctor/auth-doctor.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\n\r\n@NgModule({\r\n  declarations: [AuthComponent, LoginComponent, ForgetPasswordComponent, ResetPasswordComponent, AuthDoctorComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    ComponentsHelperModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n"],"sourceRoot":"webpack:///"}